  components:
    schemas:
      User:
        type: object
        required:
          - firstname
          - lastname
          - email
          - password
          - isVerified
        properties:
          firstname:
            type: string
          lastname:
            type: string
          email:
            type: string
            format: email
            description: Email for the user - This is the user name.
          password:
            type: string
            description: Note that this is normally encrypted
          isVerified:
            type: boolean
            description: E-mail Verification
          userDetails:
            $ref: '#/components/schemas/UserDetails'
          userFavorite:
            $ref: '#/components/schemas/UserFavorite'
          golfBags:
            type: array
            $ref: '#/components/schemas/GolfBag'
          userSports:
            $ref: '#/components/schemas/UserSports'        
        example:
            firstname: Swagger
            lastname: Test
            email: swaggertest852@gmail.com
            password: test
            isVerified: false

      UserDetails:
        type: object
        properties:
          age:
            type: int
          height:
            type: string
          weight:
             type: int
        example:
          age: 25
          height: 6'0"
          weight: 180

      UserSports:
        type: object
        properties:
          golf:
            $ref: '#/components/schemas/UserSportsGolf'

      UserSportsGolf:
        type: object
        properties:
          datePlayed: 
            type: string
            format: date
          golfMatch:
            type: array
            $ref: '#/components/schemas/GolfSubScore'
          GolfBagUsed:
            $ref: '#/components/schemas/GolfBag'
        example:
          datePlayed: 10/25/2020

      UserFavorite:
        type: object
        properties:
          userFavoriteGolf:
            type: object
            properties:
              favoriteGolfCourse:
                $ref: '#/components/schemas/GolfCourse'
              favoriteGolfClub:
                $ref: '#/components/schemas/UserEquipmentGolfClub'

      GolfBag:
        type: object
        properties:
          bagname:
            type: string
            unique: false
            trim: true
          golfClub:
            type: array
            items:
              $ref: '#/components/schemas/UserEquipmentGolfClub'

      UserEquipmentGolfClub:
        type: object
        properties:
          clubType: 
            type: number
          clubName:
            type: string
            trim: true
            unique: false
        example:
          clubType: 3
          clubName: wood

      GolfCourse:
        type: object
        required:
          - courseName
        properties:
          courseName:
            type: string
            unique: True
        example:
          courseName: Twin Rivers

      GolfSubScore:
        type: object
        required:
          - score
        properties:
          score:
            type: number
          greenInRegulation:
            type: boolean
          fairwayHit:
            type: boolean
          numberOfPutts:
            type: number
          clubsUsed:
            type: array
            items:
              $ref: '#/components/schemas/UserEquipmentGolfClub'
        example:
          score: 4
          greenInRegulation: true
          fairwayHit: true
          numberOfPutts: 2

  path:
    /users/register:
      post:
        summary: Create a new user
        tags: [Users]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          "200":
            description: User Registered
            content:
              application/json:
                Message:
                  type: string
                  example: User Registered
          "400":
            description: User Name Taken
            content:
              application/json:
                warning:
                  type: string
                  example: User Name Taken
            "400":
                description: Invalid Character Used
                content:
                  application/json:
                    warning:
                      type: string
                      example: Invalid Character Name
  /users/login:
      post:
        summary: login to user account
        tags: [Users]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                email:
                  type: string
                  example: swaggertest852@gmail.com
                password:
                  type: string
                  example: test
        security: []
        responses:
          "200":
            description: User Registered - returns User schema and Login Cookie
            headers:
              Set-Cookie:
                type: string
                example:  
            content:
                
          "400":
            description: Invalid Login
            content:
              application/json:
                warning:
                  type: string
                  example: Invalid credentials
            "500":
                description: Cannot connect to database
                content:
                  application/json:
                    warning:
                      type: string
                      example: Error Json


  securitySchemes:
  UserAuth:
    type: apiKey
    in: cookie       
    name: UserCookie

  security:
  - UserAuth: []



        


      

      



 